// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  username     String       @unique
  password     String
  role         Role?        @relation(fields: [role_id], references: [id])
  role_id      Int?
  restaurants  Restaurant[]
  orders       Order[]
  referralCode String?
}

model Role {
  id     Int          @id @default(autoincrement())
  name   String
  code   RoleCodeEnum @unique()
  weight Int
  users  User[]
}

enum RoleCodeEnum {
  CLIENT
  RESTAURATEUR
  DELIVERY_PERSON
  ADMINISTRATOR
}

model Restaurant {
  id           Int                 @id @default(autoincrement())
  name         String              @unique
  address      String
  phoneNumber  String
  email        String
  openingHours String
  cuisineType  String
  imageUrl     String?
  menuItems    MenuItem[]
  menu         Menu[]
  status       RestaurantStatus
  requests     RestaurantRequest[]
  ownerId      Int
  owner        User                @relation(fields: [ownerId], references: [id])
}

model Menu {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  description   String?
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id Int
  menuItems     MenuItem[]
  imageUrl      String?
}

model MenuItem {
  id            Int                    @id @default(autoincrement())
  name          String
  description   String
  price         Float
  restaurant    Restaurant             @relation(fields: [restaurant_id], references: [id])
  restaurant_id Int
  menu_id       Int?
  menu          Menu?                  @relation(fields: [menu_id], references: [id])
  imageUrl      String?
  order         Order[]
  discountsApp  DiscountApplicableTo[]
  discounts     Discount[]
}

enum RestaurantStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  BLOCKED
}

model RestaurantRequest {
  id            Int              @id @default(autoincrement())
  restaurant    Restaurant       @relation(fields: [restaurant_id], references: [id])
  restaurant_id Int
  status        RestaurantStatus @default(DRAFT)
}

model Order {
  id                    Int        @id @default(autoincrement())
  userId                Int
  user                  User       @relation(fields: [userId], references: [id])
  items                 MenuItem[]
  totalPrice            Float
  deliveryAddress       String?
  deliveryInstructions  String?
  discountCode          String?
  customerNotes         String?
  deliveryMethod        String?
  paymentStatus         String
  paymentMethod         String?
  estimatedDeliveryDate DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

model Discount {
  id           Int                    @id @default(autoincrement())
  name         String                 @unique
  description  String?
  type         DiscountType
  value        Float
  startDate    DateTime?
  endDate      DateTime?
  isActive     Boolean
  menuItem     MenuItem[]
  discountsApp DiscountApplicableTo[]
}

model DiscountApplicableTo {
  id           Int          @id @default(autoincrement())
  discount     Discount     @relation(fields: [discountId], references: [id])
  discountId   Int
  menuItemId   Int? // Identifiant de l'élément de menu auquel la remise s'applique
  menuItem     MenuItem?    @relation(fields: [menuItemId], references: [id])
  minQuantity  Int? // Quantité minimale de produits pour que la remise s'applique
  minAmount    Float? // Montant minimum d'achat pour que la remise s'applique
  startDate    DateTime? // Date de début de validité de la remise pour cet élément de menu
  endDate      DateTime? // Date de fin de validité de la remise pour cet élément de menu
  customerType CustomerType
}

enum DiscountType {
  PERCENTAGE // Remise en pourcentage
  FIXED_AMOUNT // Montant fixe de remise
}

enum CustomerType {
  NEW_CUSTOMER // Nouveau client
  RETURNING_CUSTOMER // Client fidèle
  ALL_CUSTOMERS // Tous les clients
}
