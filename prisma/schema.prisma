// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  username    String       @unique
  password    String
  role_id     Int?
  role        Role?        @relation(fields: [role_id], references: [id])
  restaurants Restaurant[]
}

model Role {
  id     Int          @id @default(autoincrement())
  name   String
  code   RoleCodeEnum @unique()
  weight Int
  users  User[]
}

enum RoleCodeEnum {
  CLIENT
  RESTAURATEUR
  DELIVERY_PERSON
  ADMINISTRATOR
}

model Restaurant {
  id           Int                 @id @default(autoincrement())
  name         String              @unique
  address      String
  phoneNumber  String
  email        String
  openingHours String
  cuisineType  String
  imageUrl     String?
  menuItems    MenuItem[]
  menu         Menu[]
  status       RestaurantStatus
  requests     RestaurantRequest[]
  ownerId      Int
  owner        User                @relation(fields: [ownerId], references: [id])
}

model Menu {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  description   String?
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id Int
  menuItems     MenuItem[]
  imageUrl      String?
}

model MenuItem {
  id            Int        @id @default(autoincrement())
  name          String
  description   String
  price         Float
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id Int
  menu_id       Int?
  menu          Menu?      @relation(fields: [menu_id], references: [id])
  imageUrl      String?
}

enum RestaurantStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  BLOCKED
}

model RestaurantRequest {
  id            Int              @id @default(autoincrement())
  restaurant    Restaurant       @relation(fields: [restaurant_id], references: [id])
  restaurant_id Int
  status        RestaurantStatus @default(DRAFT)
}
