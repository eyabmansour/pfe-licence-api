// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                    @id @default(autoincrement())
  email          String                 @unique
  username       String                 @unique
  password       String
  role           Role?                  @relation(fields: [role_id], references: [id])
  role_id        Int?
  restaurants    Restaurant[]
  orders         Order[]
  referralCode   String?
  referralUsages ReferralUsage[]
  discounts      DiscountApplicableTo[]
  imageUrl       String?
  menu           Menu[]
}

model Role {
  id     Int          @id @default(autoincrement())
  name   String
  code   RoleCodeEnum @unique()
  weight Int
  users  User[]
}

enum RoleCodeEnum {
  CLIENT
  RESTAURATEUR
  DELIVERY_PERSON
  ADMINISTRATOR
}

model Restaurant {
  id           Int                 @id @default(autoincrement())
  name         String              @unique
  address      String
  phoneNumber  String
  email        String
  openingHours String
  cuisineType  String
  imageUrl     String?
  menuItems    MenuItem[]
  menu         Menu[]
  status       RestaurantStatus    @default(DRAFT)
  requests     RestaurantRequest[]
  ownerId      Int
  owner        User                @relation(fields: [ownerId], references: [id])
  discount     Discount[]
  categorie    Category[]
}

model Menu {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  description   String?
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  restaurant_id Int
  menuItems     MenuItem[]
  imageUrl      String?
  categories    Category[]
  ownerId       Int
  owner         User       @relation(fields: [ownerId], references: [id])
}

model MenuItem {
  id            Int                    @id @default(autoincrement())
  name          String
  description   String
  price         Float
  restaurant    Restaurant             @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  restaurant_id Int
  menu_id       Int?
  menu          Menu?                  @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  imageUrl      String?
  order         OrderItem[]
  discountsApp  DiscountApplicableTo[]
  categoryId    Int?
  category      Category?              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Category {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  restaurantId Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuId       Int?
  menu         Menu?       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuItems    MenuItem[]
}

enum RestaurantStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  BLOCKED
}

model RestaurantRequest {
  id            Int              @id @default(autoincrement())
  restaurant    Restaurant       @relation(fields: [restaurant_id], references: [id])
  restaurant_id Int
  status        RestaurantStatus
}

model Order {
  id                    Int         @id @default(autoincrement())
  userId                Int
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items                 OrderItem[]
  totalPrice            Float
  deliveryAddress       String?
  deliveryInstructions  String?
  discountCode          String?
  customerNotes         String?
  deliveryMethod        String?
  paymentStatus         String
  paymentMethod         String?
  estimatedDeliveryDate DateTime?
  status                OrderStatus @default(PENDING)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int      @default(1)
}

enum OrderStatus {
  PENDING
  IN_CHARGE
  IN_THE_PROCESS_OF_DELIVERY
}

model Discount {
  id             Int                    @id @default(autoincrement())
  name           String                 @unique
  description    String?
  type           DiscountType
  value          Float
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean
  restaurantId   Int
  restaurant     Restaurant             @relation(fields: [restaurantId], references: [id])
  discountsApp   DiscountApplicableTo[]
  referralUsages ReferralUsage[]
}

model DiscountApplicableTo {
  id            Int       @id @default(autoincrement())
  discount      Discount  @relation(fields: [discountId], references: [id])
  discountId    Int
  menuItem      MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId    Int
  minQuantity   Int?
  minAmount     Float?
  minOrderCount Int?
  userId        Int
  user          User?     @relation(fields: [userId], references: [id])
}

model ReferralUsage {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  discount   Discount @relation(fields: [discountId], references: [id])
  discountId Int
  usedAt     DateTime @default(now())
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
